A library for Event-Driven Web Applications (EDWA).

EDWA is appropriate for applications that are similar to traditional desktop applications, in that
they need to maintain state for a particular user, but are not focused on sharing that state with others.
It is particularly useful when navigation between "pages" or "states" is dynamic and stack-like,
and/or when links are expected to carry out UI "actions".

A typical example might be a web store: from a product page, you click a link to add it to the shopping cart.
(That link does not have the typical "display some information" sematics of a normal HTTP GET,
but rather the "change my internal state" sematics of HTTP POST -- but it's implemented via GET.)
From the shopping cart, you enter a "subroutine" to change your (stored) shipping preferences.
Then you "pop" back up to the shopping cart, and click a link that causes your shipping charges to be recalculated.
Finally, you pop up again to the product page you started from.
EDWA is particularly focused on this kind of call/return and action/response navigation logic.

The current "call stack" is stored directly as a signed, base64-encoded URL where possible.
These links can be bookmarked and even emailed to others (although they may be quite long),
and will always preserve immutably their starting state, even if re-visited many times.
(Although this data is opaque, it could be decoded and inspected by a savvy client.
One could add (symmetric) encryption to prevent this.)
If the associated data grows too large, it is transparently substituted for a unique ID,
and the data itself is stored in the EDWA object.
(That object must then be persisted somehow, such as in the "session" object provided by your web framework.
Since retrieval then depends on the session ID, usually stored in a cookie, these cannot be emailed.)

Unlike my earlier efforts, this framework does not break the browser back button,
nor does it prevent the user from "forking" the application by opening a new tab or window.
However, if page contexts become large, the total size of the EDWA object may grow without bound.
If the total size exceeds a user-defined limit, "old" actions (not generated by the current view)
will be flushed away, which may break the back button and/or "forked" versions of the app.
Unfortunately, that's about the best I can do.

By convention, each "major state" or "page" of the application is represented as a class with a render() function.
Actions associated with that page are additional member functions.
The class is only used as a convenient grouping namespace: it must have a no-argument constructor,
and there is no guarantee that render() and the action function(s) will be called on the same instance.
Thus, if you prefer, all view AND actions may simply be top-level functions in one or more modules.

Views (e.g. render()) take two arguments, the current EDWA object and a "request" object from e.g. the web framework.
The EDWA object contains a "context" dictionary that is analogous to kwargs in a typical Python function.
Views should be "pure" -- they should not modify their context, although this is not enforced.
To protect against accidental misuse of the library, view are prohibited from calling do_goto/call/return().
They can create links to actions, however, using make_action().
Shortcuts are provided for *links* that navigate to other views: make_goto(), make_call(), and make_return().
For a link that simply re-displays the current view, call make_noop().

Actions also take two arguments, the current EDWA object and the web framework "request" object.
Actions may use EDWA.context to add/change/remove context variables for the current view,
or may change the current view using do_goto(), do_call(), or do_return().

Although I've tried to make this as efficient as possible, generating a simple action link takes ~300 us,
or about 20 times longer than just pickling and 5 times longer than pickling and compressing.
Most of this appears to be the HMAC signature, which protects the URLs from tampering.
In situations where server performance is an issue, this library is only appropriate if the back-end
processing of actions is significantly more costly than the overhead generated by EDWA.
(Probably true in most cases.  But your mileage may vary.)
On the other hand, if everything can be encoded as a URL, it may eliminate the need for a round-trip to the database.

=== SECURITY ===

There are several known possible dangers in using EDWA to develop a web applications, listed below.
Many of these are shared by some or all other web frameworks, but some may be unique to EDWA.
Other risks, unforeseen by the author, may also exist.

1.  Remote code execution / compromise of server machine
    EDWA uses Python's "pickle" module to store and retrieve objects.
    The "pickle" documentation states that it is not intended to be secure against malicious data.
    EDWA uses cryptographic signing to prevent clients from crafting malicious data to send to "pickle",
    but if (1) the secret key became known to the client, (2) the signing scheme were implemented incorrectly in EDWA,
    or (3) a weakness was discovered in HMAC-SHA1 signing, a client might circumvent this protection.
    Depending on the specific weaknesses of "pickle" and/or "cPickle", this could lead to buffer-overflow and other attacks.
    For this reason, it is *very* important to protect the secret key when storing pickled data
    in web pages or URLs on the client side (i.e. the GET and POST backends).

2.  Exposing private internal data to users
    In GET and POST mode, the current state of the application is stored on the client as page contents and/or URLs.
    Although this data is signed to prevent *modification*, by default the client can still *read* all the data stored there.
    If your application stores information in EDWA that you would not want the user to view,
    you must either encrypt the data (using the KeyczarEDWA object) or use the database backend.

3.  Session hijacking / user data theft
    The GET and database backends both store application state in the URL:  GET stores a pickled Python object directly,
    and the database stores a unique identifier in the URL which corresponds to an object stored in the database.
    This can be a feature, because application states can be bookmarked in the browser or emailed to oneself or others.
    However, these URLs may also be exposed to other web sites by the HTTP Referrer: header
    when the user leaves the application, e.g. by clicking a link to another site.
    In this case, a malicious third-party site could access the user's data directly (by decoding the GET pickle, as above)
    and/or hijack the user's session to mis-use the web application or steal user data from it.
    The harm (or not) of such attacks depends entirely on the nature of your web application.
    To protect against direct decoding, either encrypt the GET pickles with Keyczar, or use the database backend.
    To protect against hijacking, create a unique secret key for each user that is tied to the user's session cookie.
    (This will prevent users from emailing links to application states,
    and depending on the life of the session cookie, may prevent them from bookmarking application states.)
    Because Keyczar does not seem to support salting its on-disk keys,
    the GET backend cannot be protected against both these dangers simultanously.
    If this is a concern but you still want to use the GET backend, you should encrypt with Keyczar and then
    make sure all links to external sites pass through a "bounce" page on your server, e.g.:
    
        http://my-web-app.com/bounce?dest=http://evil-other-site.com/

    If implemented correctly, this should avoid passing GET pickle outside your site in the Referrer: header.
    Use a tool like Firebug to ensure that you have successfully done this.

=== CHOICE OF BACKEND ===

EDWA supports similar feature sets using several different backend implementations.
The available backends are GET, POST, and database;  the GET and POST modes also have encrypted variants.
Furthermore, for unencrypted GET and POST, you may use a global secret key or a per-user secret key for signing.
Note that all GET methods failover to their corresponding POST methods if encoded data size exceeds ~2000 characters.

- Unencrypted GET, same secret key for all users
  Pros: no database required, all data stored client-side, users can bookmark and email application states as links,
        users can "fork" the application by opening links in new tabs/windows.
  Cons: data size must stay below 2000 bytes when signed and encoded, data may be inspected by user,
        care must be taken to avoid exposing URLs to external web sites via the Referrer: header,
        requires basic JavaScript capabilities on the client (excludes web crawlers, etc).

- Unencrypted GET, unique secret key tied to user's session cookie
  Pros: no database required, all data stored client-side, users can bookmark application states
        (for the life of the cookie only), users can "fork" the application by opening links in new tabs/windows.
  Cons: data size must stay below 2000 bytes when signed and encoded, data may be inspected by user,
        care must be taken to avoid exposing URLs to external web sites via the Referrer: header (due to decoding, not hijacking),
        requires basic JavaScript capabilities on the client (excludes web crawlers, etc),
        user cannot email application states as links (and bookmarks will eventually expire)

- Encrypted GET, same secret key for all users (unique keys not supported by Keyczar)
  Pros: no database required, all data stored client-side, users can bookmark and email application states as links,
        users can "fork" the application by opening links in new tabs/windows, user cannot decode application data.
  Cons: data size must stay below 2000 bytes when signed and encoded,
        encrypting many links can be quite CPU intensive (~100 / second?),
        care must be taken to avoid exposing URLs to external web sites via the Referrer: header,
        requires basic JavaScript capabilities on the client (excludes web crawlers, etc).

- Unencrypted POST, same secret key for all users OR unique secret key tied to user's session cookie
  Pros: no database required, all data stored client-side, data size limited only by network bandwidth,
        no danger in exposing URLs to external web sites via the Referrer: header.
  Cons: data may be inspected by user, users cannot bookmark and email application states as links,
        users cannot "fork" the application by opening links in new tabs/windows,
        requires basic JavaScript capabilities on the client (excludes web crawlers, etc).

- Encrypted POST, same secret key for all users (unique keys not supported by Keyczar)
  Pros: no database required, all data stored client-side, data size limited only by network bandwidth,
        no danger in exposing URLs to external web sites via the Referrer: header, user cannot decode application data.
  Cons: users cannot bookmark and email application states as links,
        users cannot "fork" the application by opening links in new tabs/windows,
        encrypting many links can be quite CPU intensive (~100 / second?),
        requires basic JavaScript capabilities on the client (excludes web crawlers, etc).

- Database, same secret key (user GUID) for all users
  Pros: data size not limited by network bandwidth, user cannot decode application data,
        users can bookmark and email application states as links,
        users can "fork" the application by opening links in new tabs/windows,
        no JavaScript required on the client (permits web crawlers, etc).
  Cons: database required, data accumulates on server side and must be periodically purged,
        care must be taken to avoid exposing URLs to external web sites via the Referrer: header.

- Database, unique secret key (user GUID) tied to user's session cookie
  Pros: data size not limited by network bandwidth, user cannot decode application data,
        users can bookmark application states (for the life of the cookie only),
        users can "fork" the application by opening links in new tabs/windows,
        no danger in exposing URLs to external web sites via the Referrer: header,
        no JavaScript required on the client (permits web crawlers, etc).
  Cons: database required, data accumulates on server side and must be periodically purged,
        user cannot email application states as links (and bookmarks will eventually expire).

=== ACKNOWLEDGEMENTS ===

EDWA builds on ideas developed in PHP by Ian Davis for MolProbity (http://molprobity.biochem.duke.edu).

Development of EDWA has been made possible in part by GrassRoots Biotechnology.
